#!/usr/bin/python

import sys
import json
import doi
import doi.db
import info

test_flag = True

base_lp_url = 'http://doi.virtualbrain.org'

insert_subject_sql = """INSERT INTO subject (project, 
                                             label, 
                                             xnat_id, 
                                             gender, 
                                             age, 
                                             handedness) 
                        VALUES (%s, %s, %s, %s, %s, %s)"""

insert_image_sql = """INSERT INTO image (doi, project, subject, xnat_id, type) 
                      VALUES (%s, %s, %s, %s, %s)"""

def create(md):
    """mint the DOI and update the landing page"""
    d = doi.DOI(doi.mint(base_lp_url, md, test_flag))
    d.update_landing_page('%s/lp/%s' % (base_lp_url, d.identifier))
    return d

def anat_url(project, id):
    url = 'http://doi.virtualbrain.org/xnat/app/action/'
    url += 'DisplayItemAction/search_element/'
    url += 'xnat%3AmrSessionData/search_field/'
    url += 'xnat%3AmrSessionData.ID/search_value/'
    url += id
    url += '/popup/false/project/'
    url += project
    return url

def seg_url(project, id):
    url = 'http://doi.virtualbrain.org/xnat/app/action/'
    url += 'DisplayItemAction/search_element/'
    url += 'ir%3ACandiShareSegData/search_field/'
    url += 'ir%3ACandiShareSegData.ID/search_value/'
    url += id
    url += '/popup/false/project/'
    url += project
    return url

def create_subjects(project_code):
    print 'subjects for %s' % project_code
    with doi.db.DBCursor() as c:
        for subject_info in info.iter_subjects(project_code):
            print '    %s' % subject_info['label']
            c.execute(insert_subject_sql, (project_code, 
                                           subject_info['label'], 
                                           subject_info['XNAT ID'], 
                                           subject_info['gender'],
                                           subject_info['age'],
                                           subject_info['handedness']))
    return

def create_images(project_code, project_name, project_doi):
    images = []
    print 'images for %s' % project_code
    for image_info in info.iter_images(project_code):
        md = {}
        for key in ('creators', 
                    'publisher', 
                    'publicationyear', 
                    'version', 
                    'rights', 
                    'geolocation'):
            if key in project_doi.metadata:
                md[key] = project_doi.metadata[key]
        if image_info['type'] == 'Anatomical MR':
            md['resourcetype'] = 'Image/Structural MR'
            url = anat_url(project_code, image_info['XNAT ID'])
            db_type = 'anat'
        elif image_info['type'] == 'Manual Segmentation':
            md['resourcetype'] = 'Image/Manual Segmentation'
            url = seg_url(project_code, image_info['XNAT ID'])
            db_type = 'seg'
        else:
            assert False
        md['alternateidentifiers'] = (('URL', url), )
        md['sizes'] = image_info['sizes']
        md['formats'] = ('NIfTI-1', )
        md['title'] = '%s for %s subject %s' % (image_info['type'], 
                                                project_name, 
                                                image_info['subject'])
        md['relatedidentifiers'] = ((project_doi.identifier, 
                                     'DOI', 
                                     'IsPartOf'), )
        image = create(md)
        print '    %s' % image.identifier
        images.append(image)
        with doi.db.DBCursor() as c:
            c.execute(insert_image_sql, (image.identifier, 
                                         project_code, 
                                         image_info['subject'], 
                                         image_info['XNAT ID'], 
                                         db_type))
    md = project_doi.copy_metadata()
    if 'relatedidentifiers' not in md:
        md['relatedidentifiers'] = []
    for image in images:
        md['relatedidentifiers'].append((image.identifier, 'DOI', 'HasPart'))
    project_doi.update_metadata(md)
    print 'updated %s with images' % project_code

candi_share_md = json.load(open('candi_share.json'))
candi_share = create(candi_share_md)
print 'created CANDI Share:', candi_share.identifier

ibsr_md = json.load(open('ibsr.json'))
ibsr = create(ibsr_md)
print 'created IBSR:', ibsr.identifier

with doi.db.DBCursor() as c:
    c.execute("INSERT INTO project (doi, xnat_id) VALUES (%s, %s)", 
              (candi_share.identifier, 'cs_schizbull08'))
    c.execute("INSERT INTO project (doi, xnat_id) VALUES (%s, %s)", 
              (ibsr.identifier, 'ibsr'))

create_subjects('cs_schizbull08')
create_subjects('ibsr')

create_images('cs_schizbull08', 
              'CANDI Share Schizophrenia Bulletin 2008', 
              candi_share)
create_images('ibsr', 'IBSR', ibsr)

sys.exit(0)

# eof
