#!/usr/bin/python

import sys
import os
import xml.dom.minidom
import json
import requests
import doi
import doi.db
import info

test_flag = False

insert_subject_sql = """INSERT INTO subject (project, 
                                             label, 
                                             xnat_id, 
                                             gender, 
                                             age, 
                                             handedness) 
                        VALUES (%s, %s, %s, %s, %s, %s)"""

insert_image_sql = """INSERT INTO image (doi, 
                                         project, 
                                         subject, 
                                         xnat_experiment_id, 
                                         xnat_id, 
                                         type) 
                      VALUES (%s, %s, %s, %s, %s, %s)"""

def anat_url(project, id):
    url = 'http://iaf.virtualbrain.org/xnat/app/action/'
    url += 'DisplayItemAction/search_element/'
    url += 'xnat%3AmrSessionData/search_field/'
    url += 'xnat%3AmrSessionData.ID/search_value/'
    url += id
    url += '/popup/false/project/'
    url += project
    return url

def seg_url(project, id):
    url = 'http://iaf.virtualbrain.org/xnat/app/action/'
    url += 'DisplayItemAction/search_element/'
    url += 'ir%3ACandiShareSegData/search_field/'
    url += 'ir%3ACandiShareSegData.ID/search_value/'
    url += id
    url += '/popup/false/project/'
    url += project
    return url

def set_project_doi(project_code, identifier):
    url = 'http://localhost:8080/xnat/data/projects/%s' % project_code
    r = requests.get(url + '?format=xml')
    doc = xml.dom.minidom.parseString(r.content)
    update_doi(doc, 'xnat:Project', identifier)
    data = doc.toxml()
    auth = (os.environ['XNAT_USER'], os.environ['XNAT_PASSWORD'])
    requests.put(url + '?inbody=true', data=data, auth=auth)
    # fix project permissions
    requests.put(url + '/accessibility/public', auth=auth)
    return

def set_anat_doi(project_code, subject, identifier):
    experiment = '%s_MR' % subject
    url = 'http://localhost:8080/xnat/data/projects/'
    url += project_code
    url += '/subjects/'
    url += subject
    url += '/experiments/'
    url += experiment
    url += '/scans/anat'
    r = requests.get(url + '?format=xml')
    doc = xml.dom.minidom.parseString(r.content)
    update_doi(doc, 'xnat:MRScan', identifier)
    data = doc.toxml()
    auth = (os.environ['XNAT_USER'], os.environ['XNAT_PASSWORD'])
    requests.put(url + '?inbody=true', data=data, auth=auth)
    return
    
def set_seg_doi(project_code, subject, identifier):
    experiment = '%s_MR' % subject
    segmentation = '%s_seg' % experiment
    url = 'http://localhost:8080/xnat/data/projects/'
    url += project_code
    url += '/subjects/'
    url += subject
    url += '/experiments/'
    url += experiment
    url += '/assessors/'
    url += segmentation
    r = requests.get(url + '?format=xml')
    doc = xml.dom.minidom.parseString(r.content)
    update_doi(doc, 'ir:CandiShareSeg', identifier)
    data = doc.toxml()
    auth = (os.environ['XNAT_USER'], os.environ['XNAT_PASSWORD'])
    requests.put(url + '?inbody=true', data=data, auth=auth)
    return

def update_doi(doc, base_tag, identifier):
    """set or update ir:DOI"""
    els = doc.getElementsByTagName('ir:DOI')
    if els:
        doi_el = els[0]
        children = tuple(doi_el.childNodes)
        for el in children:
            doi_el.removeChild(el)
    else:
        els = doc.getElementsByTagName(base_tag)
        assert len(els) == 1
        cs_el = els[0]
        doi_el = doc.createElement('ir:DOI')
        cs_el.appendChild(doi_el)
    doi_el.appendChild(doc.createTextNode(identifier))
    return
    
def create_subjects(project_code):
    print 'subjects for %s' % project_code
    with doi.db.DBCursor() as c:
        for subject_info in info.iter_subjects(project_code):
            print '    %s' % subject_info['label']
            c.execute(insert_subject_sql, (project_code, 
                                           subject_info['label'], 
                                           subject_info['XNAT ID'], 
                                           subject_info['gender'],
                                           subject_info['age'],
                                           subject_info['handedness']))
    return

def create_images(project_code, project_name, project_doi):
    images = []
    print 'images for %s' % project_code
    for image_info in info.iter_images(project_code):
        md = {}
        for key in ('creators', 
                    'publisher', 
                    'publicationyear', 
                    'version', 
                    'rights', 
                    'geolocation'):
            if key in project_doi.metadata:
                md[key] = project_doi.metadata[key]
        if image_info['type'] == 'Anatomical MR':
            md['resourcetype'] = 'Image/Structural MR'
            url = anat_url(project_code, image_info['XNAT ID'])
            db_type = 'anat'
            xml_doi_fct = set_anat_doi
        elif image_info['type'] == 'Manual Segmentation':
            md['resourcetype'] = 'Image/Manual Segmentation'
            url = seg_url(project_code, image_info['XNAT ID'])
            db_type = 'seg'
            xml_doi_fct = set_seg_doi
        else:
            assert False
        md['alternateidentifiers'] = (('URL', url), )
        md['sizes'] = image_info['sizes']
        md['formats'] = (image_info['format'], )
        md['title'] = '%s for %s subject %s' % (image_info['type'], 
                                                project_name, 
                                                image_info['subject'])
        md['relatedidentifiers'] = ((project_doi.identifier, 
                                     'DOI', 
                                     'IsPartOf'), )
        image = doi.mint(md, test_flag)
        print '    %s' % image.identifier
        images.append(image)
        with doi.db.DBCursor() as c:
            c.execute(insert_image_sql, (image.identifier, 
                                         project_code, 
                                         image_info['subject'], 
                                         image_info['XNAT experiment ID'], 
                                         image_info['XNAT ID'], 
                                         db_type))
        xml_doi_fct(project_code, image_info['subject'], image.identifier)
    md = project_doi.copy_metadata()
    if 'relatedidentifiers' not in md:
        md['relatedidentifiers'] = []
    for image in images:
        md['relatedidentifiers'].append((image.identifier, 'DOI', 'HasPart'))
    project_doi.update_metadata(md)
    print 'updated %s with images' % project_code

candi_share_md = json.load(open('candi_share.json'))
candi_share = doi.mint(candi_share_md, test_flag)
print 'created CANDI Share:', candi_share.identifier

ibsr_md = json.load(open('ibsr.json'))
ibsr = doi.mint(ibsr_md, test_flag)
print 'created IBSR:', ibsr.identifier

with doi.db.DBCursor() as c:
    c.execute("INSERT INTO project (doi, xnat_id) VALUES (%s, %s)", 
              (candi_share.identifier, 'cs_schizbull08'))
    c.execute("INSERT INTO project (doi, xnat_id) VALUES (%s, %s)", 
              (ibsr.identifier, 'ibsr'))

set_project_doi('ibsr', ibsr.identifier)
set_project_doi('cs_schizbull08', candi_share.identifier)

create_subjects('cs_schizbull08')
create_subjects('ibsr')

create_images('cs_schizbull08', 
              'CANDI Share Schizophrenia Bulletin 2008', 
              candi_share)
create_images('ibsr', 'IBSR', ibsr)

sys.exit(0)

# eof
